import json
import logging
import os
import sys
import time
from datetime import datetime

from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.error import TelegramError

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger('bot')

def load_templates():
    """Load templates from JSON file."""
    try:
        with open('report_templates.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"Error loading templates: {e}")
        # Return empty templates structure in case of error
        return {
            "baixa": {},
            "fac": {}
        }

# Command handlers
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a welcome message when the command /start is issued."""
    await update.message.reply_text(
        "Ol√°! Sou o Bot de Relat√≥rios de Servi√ßo.\n\n"
        "Comandos dispon√≠veis:\n"
        "/baixa [n√∫mero] - Gera descri√ß√£o detalhada da baixa\n"
        "/fac [n√∫mero] - Gera Ficha de Atendimento ao Cliente\n"
        "/restart - Reinicia o bot (apenas para administradores)\n"
        "/help - Mostra ajuda detalhada sobre os comandos"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send help message when the command /help is issued."""
    help_text = (
        "üìã *Ajuda do Bot de Relat√≥rios* üìã\n\n"
        "*O que este bot faz?*\n"
        "Este bot foi desenvolvido para auxiliar t√©cnicos e equipes de suporte na gera√ß√£o r√°pida e padronizada "
        "de relat√≥rios de atendimento, utilizando os c√≥digos de baixa e FAC (Ficha de Atendimento ao Cliente).\n\n"
        
        "üìå *Comandos dispon√≠veis*\n\n"
        
        "*/baixa [n√∫mero]*\n"
        "Gera a descri√ß√£o detalhada da baixa correspondente ao n√∫mero informado.\n"
        "Exemplo:\n"
        "`/baixa 103`\n"
        "Resposta:\n"
        "```\n103 - Chuva\nA execu√ß√£o do servi√ßo foi impossibilitada devido √† ocorr√™ncia de chuvas intensas no momento da visita t√©cnica. A atividade ser√° reagendada conforme as condi√ß√µes clim√°ticas permitirem. Encaminhado ao COP para valida√ß√£o da visita.```\n\n"
        
        "*/fac [n√∫mero]*\n"
        "Gera a Ficha de Atendimento ao Cliente (FAC) correspondente ao n√∫mero informado.\n"
        "Exemplo:\n"
        "`/fac 103`\n"
        "Resposta:\n"
        "```\nFAC-103\nCONTRATO: [n√∫mero do contrato]\nFATO: Chuva\nCAUSA: A execu√ß√£o do servi√ßo foi impossibilitada devido √† ocorr√™ncia de chuvas intensas no momento da visita t√©cnica.\nA√á√ÉO: A atividade ser√° reagendada conforme as condi√ß√µes clim√°ticas permitirem.\nOBS: ‚úÖ Encaminhado ao COP para valida√ß√£o da visita.```\n\n"
        
        "*/restart*\n"
        "Reinicia o bot em caso de problemas ou ap√≥s atualiza√ß√µes.\n"
        "Este comando s√≥ est√° dispon√≠vel para administradores."
    )
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def baixa_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Generate a 'baixa' report."""
    templates = load_templates()
    
    if not context.args:
        await update.message.reply_text(
            "Por favor, forne√ßa o n√∫mero da baixa. Exemplo: `/baixa 103`",
            parse_mode='Markdown'
        )
        return
    
    code = context.args[0]
    baixa_templates = templates.get("baixa", {})
    
    if code in baixa_templates:
        template = baixa_templates[code]
        response = (
            f"{code} - {template['title']}\n"
            f"{template['description']}"
        )
        await update.message.reply_text(response)
    else:
        await update.message.reply_text(
            "C√≥digo de baixa n√£o encontrado. Verifique o n√∫mero e tente novamente."
        )

async def fac_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Generate a 'FAC' report."""
    templates = load_templates()
    
    if not context.args:
        await update.message.reply_text(
            "Por favor, forne√ßa o n√∫mero da FAC. Exemplo: `/fac 103`",
            parse_mode='Markdown'
        )
        return
    
    code = context.args[0]
    fac_templates = templates.get("fac", {})
    
    if code in fac_templates:
        template = fac_templates[code]
        response = (
            f"FAC-{code}\n"
            f"CONTRATO: [n√∫mero do contrato]\n"
            f"FATO: {template['fato']}\n"
            f"CAUSA: {template['causa']}\n"
            f"A√á√ÉO: {template['acao']}\n"
            f"OBS: {template['obs']}"
        )
        await update.message.reply_text(response)
    else:
        await update.message.reply_text(
            "C√≥digo de FAC n√£o encontrado. Verifique o n√∫mero e tente novamente."
        )
        
async def grupo_baixa_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Vers√£o otimizada do comando baixa para grupos."""
    templates = load_templates()
    
    if not context.args:
        await update.message.reply_text(
            "Por favor, forne√ßa o n√∫mero da baixa. Exemplo: `/grupo_baixa 103`",
            parse_mode='Markdown'
        )
        return
    
    code = context.args[0]
    baixa_templates = templates.get("baixa", {})
    
    if code in baixa_templates:
        template = baixa_templates[code]
        # Vers√£o simplificada para grupos